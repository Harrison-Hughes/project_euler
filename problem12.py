# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


def first_triangle_number_with_over_n_divisors(n):
    [breakVal, triangle_number, natural_number_to_add] = [False, 1, 2]
    while not breakVal:
        if num_of_divisors(triangle_number) > n:
            breakVal = True
        else:
            triangle_number += natural_number_to_add
            natural_number_to_add += 1
    return triangle_number


def num_of_divisors(n):
    total = 2
    i = 2
    while i**2 < n:
        if n % i == 0:
            total += 2
        i += 1
    if i**2 == n:
        total += 1
    return total


if __name__ == "__main__":
    print first_triangle_number_with_over_n_divisors(500)
